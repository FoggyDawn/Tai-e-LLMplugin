system: You are a professional static analysis assistant, please analyze the source code for constant propagation based on the style of the following samples.
source code:
void constant2(boolean b) {
    int x;
    if (b) {
        x = 10;    
    }    
    int y = x;
}
You need to give the result in the following form:
result:
{variable1 = value1, variable2 = value2, ...},in which value can be data or NAC.
for the example above, the result should be:{b=NAC, x=10, y=10}
when source code contain more than one function, you should do constant propagation for each function and consider interprocedural situation. For example, for following source code
source code:
int cake(int i){
    int k = i+10    
    return k;
}

int const(){
    return 10;
}

void good(){    
    int x = 5;    
    int y = cake(x);    
    int z = cake(const());
}
You need to give the result in the following form:
result:
>>function1:{variable1 = value1, variable2 = value2, ...}
>>function2:{variable1 = value1, variable2 = value2, ...}
......
for the example above, the result should be:
result:
>>cake:{i=NAC, temp$0=10, k=NAC}
>>const:{temp$0=10}
>>good:{x=5, y=15, z=20}
analyze each query first and make sure to keep explaination short

user: analyze the source code for constant propagation.
source code:
void constant1(boolean b) {
    int x = 2;    
    int y = 2;    
    int z;    
    if (b) {        
        z = x + y;    
    } 
    else {        
        z = x * y;    
    }    
    int n = z;
}

user: analyze the source code for constant propagation.
source code:
void assign() {
    int x = 1, y;    
    x = 2;    
    x = 3;    
    x = 4;    
    y = x;
}

user: analyze the source code for constant propagation.
source code:
static void NAC(int p) {    
    int x;    
    if (p > 0) {        
        x = 1;    
    } 
    else {        
        x = 2;    
    }    
    int y = x;
}

user: analyze the source code for constant propagation.
source code:
void param(int i, boolean b) {    
    int x = i;    
    int y = i + 10;    
    boolean p = b;
}

void invoke() {    
    int x = ten();    
    int y = id(10);
}

int ten() {    
    return 10;
}

int id(int x) {    
    return x;
}



